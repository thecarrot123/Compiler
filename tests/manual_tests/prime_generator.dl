(func listSize (lst)
    (setq size 0)
    (while (not (isempty lst))
        (setq size (plus size 1))
        (setq lst (tail lst)))
    )

(func isDivisible (a b)
    (setq inita a)
    (while (less a b))
        (setq a (plus a inita))
    (return (equal a b)))

(func isPrime (n)
    (setq i 2)
    (while (less i n)
        (cond (isDivisible n i) (return false))
        (setq i (plus i 1)))
    )

(func primeList (n)
    (setq lst '())
    (setq i 2)
    (while (less (listSize lst) n)
        (cond (isPrime i) (cons i lst))
        (setq i (plus i 1)))
    (return lst))

(prog (n)
    (primeList n))