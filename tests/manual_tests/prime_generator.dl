(func listSize (lst)
    (setq size 0)
    (while (not (isempty lst))
        (setq size (plus size 1))
        (setq lst (tail lst)))
    (return size))

(func isDivisibleHelper (a b c)
    (cond (equal a b) (return true))
    (cond (greater a b) (return false))
    (return (isDivisibleHelper (plus a c) b c )))

(func isDivisible (a b)
    (return (isDivisibleHelper a b a)))

(func isPrime (n)
    (setq j 2)
    (setq flag true)
    (while (less j n)
        (cond (isDivisible j n) (setq flag false))
        (setq j (plus j 1)))
    (return flag)
    )

(func primeList (n)
    (setq lst '())
    (setq i 2)
    (while (less (listSize lst) n)
        (cond (isPrime i) (setq lst (cons i lst)))
        (setq i (plus i 1)))
    (return lst))

(prog (n)
    (primeList n))